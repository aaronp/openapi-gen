openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /data/user/{id}:
    get:
      summary: Get User by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /data/user:
    get:
      summary: List User values
      operationId: listUser
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The get results for User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Query User values
      operationId: queryUser
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserQuery'
      responses:
        '200':
          description: The query results for User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /data/product/{id}:
    get:
      summary: Get Product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /data/product:
    get:
      summary: List Product values
      operationId: listProduct
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The get results for Product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Query Product values
      operationId: queryProduct
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductQuery'
      responses:
        '200':
          description: The query results for Product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
    UserFields:
      type: string
      enum:
        - id
        - username
        - email
        - createdAt
    UserQuery:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/UserFields'
        value:
          type: string
        operation:
          $ref: '#/components/schemas/Operation'
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
          format: int64
        description:
          type: invalid
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - price
        - quantity
    ProductFields:
      type: string
      enum:
        - id
        - name
        - price
        - quantity
        - description
        - createdAt
    ProductQuery:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/ProductFields'
        value:
          type: string
        operation:
          $ref: '#/components/schemas/Operation'
    Operation:
      type: string
      enum:
        - contains
        - equal
        - gte
        - gt
        - lte
        - lt
        - notEqual
        - in
