openapi: 3.0.0
info:
  title: Gen API
  description: API for the UI for the open generator
  version: 1.0.0

paths:
  /api/results:
    post:
      summary: Save a ScriptResult
      description: Endpoint to save a ScriptResult with name and content properties
      operationId: saveScriptResult
      requestBody:
        description: ScriptResult object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptResult'
      responses:
        '200':
          description: ScriptResult saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResult'
  /api/data:
    post:
      summary: Submit spreadsheet data
      operationId: saveSpreadsheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spreadsheet'
      responses:
        '200':
          description: Spreadsheet data submitted successfully
        '400':
          description: Invalid request body
    get:
      summary: List the spreadsheet names
      operationId: listSpreadsheets
      responses:
        '200':
          description: A JSON array of spreadsheet names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /api/copy/{old}/{new}:
    post:
      summary: Copy spreadsheet
      operationId: copySpreadsheet
      parameters:
        - name: old
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
        - name: new
          in: path
          required: true
          description: New name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of spreadsheet names
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spreadsheets:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request body

  /api/rename/{old}/{new}:
    post:
      summary: Rename spreadsheet
      operationId: renameSpreadsheet
      parameters:
        - name: old
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
        - name: new
          in: path
          required: true
          description: New name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of spreadsheet names
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spreadsheets:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request body

  /api/renamescript/{old}/{new}:
    post:
      summary: Rename script
      operationId: renameScript
      parameters:
        - name: old
          in: path
          required: true
          description: Name of the script
          schema:
            type: string
        - name: new
          in: path
          required: true
          description: New name of the script
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of script names
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  script:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request body

  /api/data/{name}:
    delete:
      summary: Delete spreadsheet data
      operationId: deleteSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: The deleted spreadsheet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spreadsheets:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request
    get:
      summary: Get spreadsheet data
      operationId: getSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing spreadsheet data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spreadsheet'
        '400':
          description: Invalid request
  /api/script-import/{name}:
    get:
      summary: Get the imported script
      operationId: getScriptImport
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A content of the import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptImport'
        '404':
          description: Import snippet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/scripts:
    get:
      summary: List all script names
      operationId: listScripts
      responses:
        '200':
          description: A list of script names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    post:
      summary: Save a new Script
      operationId: saveScript
      requestBody:
        description: The script to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
      responses:
        '201':
          description: Script created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  message:
                    type: string
        '500':
          description: Error creating script
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/scripts/{name}:
    delete:
      summary: Delete a Script
      operationId: deleteScript
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Script deleted
        '404':
          description: Script not found
    get:
      summary: Get a Script by name
      operationId: getScript
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A Script object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        '404':
          description: Script not found
components:
  schemas:
    # remember - this types are just for what users can put in as metadata values
    Column:
      type: object
      required:
        - width
        - schema
      properties:
        width:
          type: integer
        schema:
          $ref: '#/components/schemas/SchemaField'
    SchemaField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: 'fieldName'
        # isArray:
        #   type: boolean
        #   description: Is the value repeated?
        #   example: false
        type:
          type: string
          # enum: [string, user, id, email, integer, double, price, document, boolean, date, oneOf, anyOf, binary, json, uri]
          enum: [string, text, integer, double, boolean, oneOf, anyOf]
          example: 'string'
        availableValues:
          type: array
          description: Used for oneOf and anyOf types
          items:
            type: string
          example: ['item1', 'item2']

    Sorting:
      type: object
      required:
        - direction
        - fieldName
      properties:
        fieldName:
          type: string
        direction:
          type: string
          enum: [ascending, descending]
    Spreadsheet:
      type: object
      required:
        - columns
        - rows
        - name
      properties:
        name:
          type: string
        sort:
          $ref: '#/components/schemas/Sorting'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'

    Row:
      type: object
      required:
        - cells
      properties:
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'

    Cell:
      type: object
      properties:
        # values is used if the type is anyOf
        values:
          type: array
          items:
            type: object
        value:
          type: object
          additionalProperties: true
    ScriptImport:
      type: object
      properties:
        importName:
          type: string
          description: The name of the import (e.g. the filename)
          example: 'toOpenApi.ts'
        script:
          type: string
          description: The content of the script
          example: 'type Foo = { }'
      required:
        - importName
        - script
    Script:
      type: object
      description: The script inputs will be the name of the sheet, or 'sheets' as a special value for an array of all sheet values, or else the name of another script
      properties:
        name:
          type: string
          description: This should be the script output (e.g. openApi.yaml, schema.json, ui.json, etc)
        include:
          type: string
          description: An optional script to include / import into the snippet.
        script:
          type: string
          description: the typescript code
        input:
          type: string
          description: the input key for the script (e.g. the name of another script, a sheet name, or 'sheets')
          example: 'sheets'
        autoSave:
          type: boolean
          description: If set, the script output will be saved. Otherwise it's assumed it'll be used by another script
      required:
        - name
        - script
        - input
        - autoSave
    ScriptResult:
      type: object
      properties:
        dir:
          type: string
          description: The directory to save under, if specified
        name:
          type: string
          description: Name of the script result
        content:
          type: string
          description: Content of the script result
      required:
        - name
        - content
