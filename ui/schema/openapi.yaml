openapi: 3.0.0
info:
  title: Gen API
  description: API for the UI for the open generator
  version: 1.0.0

paths:
  /api/settings:
    get:
      summary: Get settings
      operationId: getSettings
      responses:
        '200':
          description: A JSON object containing application settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    post:
      summary: Update settings
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
        '400':
          description: Invalid request body

  /api/data:
    get:
      summary: Get spreadsheet data
      operationId: getSpreadsheet
      responses:
        '200':
          description: A JSON object containing spreadsheet data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spreadsheet'
        '400':
          description: Invalid request
    post:
      summary: Submit spreadsheet data
      operationId: saveSpreadsheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spreadsheet'
      responses:
        '200':
          description: Spreadsheet data submitted successfully
        '400':
          description: Invalid request body

components:
  schemas:
    Settings:
      type: object
      required:
        - filename
        - urlPrefix
        - fields
      properties:
        filename:
          type: string
          example: 'data.json'
        urlPrefix:
          type: string
          example: 'https://example.com/api'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SchemaField'

    # remember - this types are just for what users can put in as metadata values
    SchemaField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: 'fieldName'
        # isArray:
        #   type: boolean
        #   description: Is the value repeated?
        #   example: false
        type:
          type: string
          # enum: [string, user, id, email, integer, double, price, document, boolean, date, oneOf, anyOf, binary, json, uri]
          enum: [string, integer, double, boolean, oneOf, anyOf]
          example: 'string'
        availableValues:
          type: array
          description: Used for oneOf and anyOf types
          items:
            type: string
          example: ['item1', 'item2']

    Spreadsheet:
      type: object
      required:
        - rows
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'

    Row:
      type: object
      required:
        - cells
      properties:
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'

    Cell:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
        type:
          $ref: '#/components/schemas/SchemaField'
