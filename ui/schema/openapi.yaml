openapi: 3.0.0
info:
  title: Gen API
  description: API for the UI for the open generator
  version: 1.0.0

paths:
  /api/settings:
    get:
      summary: Get settings
      operationId: getSettings
      responses:
        '200':
          description: A JSON object containing application settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    post:
      summary: Update settings
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Settings updated successfully
        '400':
          description: Invalid request body
  /api/data:
    get:
      summary: List the spreadsheet names
      operationId: listSpreadsheets
      responses:
        '200':
          description: A JSON array of spreadsheet names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /api/rename/{name}/{newName}:
    post:
      summary: Rename spreadsheet
      operationId: renameSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
        - name: newName
          in: path
          required: true
          description: New name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of spreadsheet names
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spreadsheets:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request body

  /api/data/{name}:
    delete:
      summary: Delete spreadsheet data
      operationId: deleteSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: The deleted spreadsheet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  spreadsheets:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request
    get:
      summary: Get spreadsheet data
      operationId: getSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing spreadsheet data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spreadsheet'
        '400':
          description: Invalid request
    post:
      summary: Submit spreadsheet data
      operationId: saveSpreadsheet
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the spreadsheet
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spreadsheet'
      responses:
        '200':
          description: Spreadsheet data submitted successfully
        '400':
          description: Invalid request body
  /api/scripts:
    post:
      summary: Save a new Script
      requestBody:
        description: The script to save
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Script'
      responses:
        '201':
          description: Script created successfully
    get:
      summary: List all script names
      responses:
        '200':
          description: A list of script names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/scripts/{name}:
    get:
      summary: Get a Script by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A Script object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        '404':
          description: Script not found
components:
  schemas:
    Settings:
      type: object
      required:
        - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/SchemaField'

    # remember - this types are just for what users can put in as metadata values
    SchemaField:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: 'fieldName'
        # isArray:
        #   type: boolean
        #   description: Is the value repeated?
        #   example: false
        type:
          type: string
          # enum: [string, user, id, email, integer, double, price, document, boolean, date, oneOf, anyOf, binary, json, uri]
          enum: [string, text, integer, double, boolean, oneOf, anyOf]
          example: 'string'
        availableValues:
          type: array
          description: Used for oneOf and anyOf types
          items:
            type: string
          example: ['item1', 'item2']

    Spreadsheet:
      type: object
      required:
        - rows
      properties:
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Row'

    Row:
      type: object
      required:
        - cells
      properties:
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'

    Cell:
      type: object
      required:
        - type
      properties:
        # values is used if the type is anyOf
        values:
          type: array
          items:
            type: object
        value:
          type: object
          additionalProperties: true
        type:
          $ref: '#/components/schemas/SchemaField'
    Script:
      type: object
      properties:
        name:
          type: string
        scriptPath:
          type: string
        script:
          type: string
        autoSave:
          type: boolean
        outputPath:
          type: string
      required:
        - name
        - scriptPath
        - script
        - autoSave
        - outputPath